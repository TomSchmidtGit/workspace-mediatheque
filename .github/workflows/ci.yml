name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Vérification de la qualité du code
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Install dependencies
      run: |
        npm ci
        cd frontend-mediatheque && npm ci
        cd ../backend-mediatheque && npm ci
        
    - name: Lint frontend
      run: cd frontend-mediatheque && npm run lint
      
    - name: Lint backend
      run: cd backend-mediatheque && npm run lint
      
    - name: Check formatting frontend
      run: cd frontend-mediatheque && npm run format:check
      
    - name: Check formatting backend
      run: cd backend-mediatheque && npm run format:check

  # Tests du frontend
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend-mediatheque/package-lock.json'
        
    - name: Install frontend dependencies
      run: cd frontend-mediatheque && npm ci
      
    - name: Run frontend tests
      run: cd frontend-mediatheque && npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend-mediatheque/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Tests du backend
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend-mediatheque/package-lock.json'
        
    - name: Install backend dependencies
      run: cd backend-mediatheque && npm ci
      
    - name: Run backend tests
      run: cd backend-mediatheque && npm run test:coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend-mediatheque/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Build et tests d'intégration
  build:
    name: Build & Integration Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: '**/package-lock.json'
        
    - name: Install dependencies
      run: |
        npm ci
        cd frontend-mediatheque && npm ci
        cd ../backend-mediatheque && npm ci
        
    - name: Build frontend
      run: cd frontend-mediatheque && npm run build
      
    - name: Build backend
      run: cd backend-mediatheque && npm run build
      
    - name: Docker build test
      run: |
        docker-compose build
        docker-compose down

  # Déploiement (optionnel - à configurer selon vos besoins)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker images
      run: |
        docker-compose build
        # Ajoutez ici vos commandes de déploiement
        echo "Déploiement terminé"
